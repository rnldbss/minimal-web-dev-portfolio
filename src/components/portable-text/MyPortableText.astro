---
import { PortableText } from "astro-portabletext";

interface Props {
  content: any[];
}
---

<PortableText value={Astro.props.content}>
  <!-- Handle blocks -->
  <fragment slot="block">
    {
      ({ Component, props, children }) => {
        const node = props.node;

        // Handle headings with Tailwind classes
        if (["h1", "h2", "h3", "h4"].includes(node.style)) {
          const text =
            node.children?.map((child: any) => child.text).join("") || "";

          const id = text.toLowerCase().replace(/\s+/g, "-");
          const Tag = node.style as keyof JSX.IntrinsicElements;

          // Define Tailwind classes based on the heading level
          const classes = {
            h1: "text-5xl mb-4",
            h2: "text-3xl mb-4",
            h3: "text-2xl mb-4",
            h4: "text-xl mb-4",
          };

          return (
            <Tag id={id} class={classes[node.style]}>
              {children}
            </Tag>
          );
        }

        // For non-heading blocks, ensure children are rendered
        return (
          <Component class:list={"mb-[1.4em]"} {...props}>
            {children}
          </Component>
        );
      }
    }
  </fragment>

  <!-- Handle marks (e.g., strong, em) -->
  <fragment slot="mark">
    {
      ({ Component, props, children }) => {
        // Render inline elements properly
        return <Component {...props}>{children}</Component>;
      }
    }
  </fragment>
</PortableText>
