---
import Layout from "../../layouts/Layout.astro";
import type { SanityDocument } from "@sanity/client";
import { loadQuery } from "../../sanity/lib/load-query";
import MyPortableText from "../../components/portable-text/MyPortableText.astro";
import MyPortableTextWithTOC from "../../components/portable-text/MyPortableTextWithTOC.astro";
import { urlFor } from "../../sanity/lib/image";
import { generateTOC } from "../../js/toc";
import TwoItemsList from "../../components/TwoItemsList.astro";
import AllProjectsList from "../../components/AllProjectsList.astro";

// Define TypeScript interfaces for Project data
interface TechStackItem {
  name: string;
  icon?: string;
}

interface ProjectOverview {
  body: any;
  techStack: TechStackItem[];
}

interface Project extends SanityDocument {
  title: string;
  tagLine: string;
  mainImage: any;
  body: any;
  projectOverview: ProjectOverview;
  slug: { current: string };
}

// GROQ Query for Static Paths
export async function getStaticPaths() {
  const { data: projects } = await loadQuery<Project[]>({
    query: `*[_type == "project"]`,
  });

  return projects.map(({ slug }) => ({
    params: { slug: slug.current },
  }));
}

const { params } = Astro;

// Fetch Project Data
const { data: project } = await loadQuery<Project>({
  query: `*[_type == "project" && slug.current == $slug][0]`,
  params,
});

// Fetch all projects for listing
const { data: allProjects } = await loadQuery<Project[]>({
  query: `*[_type == "project"]`,
});

// Generate TOC from `project.body`
const toc = generateTOC(project.body);
---

<Layout>
  <article class="max-w-2xl mx-auto pt-20">
    <section>
      <img
        class="max-h-[45vh] w-full object-cover"
        src={urlFor(project.mainImage)}
        alt={project.title}
      />
      <div>
        <div>
          <h1 class="text-xl md:text-2xl">
            {project.tagLine}
          </h1>
          <h2 class="">{project.title}</h2>
          <ul class="flex gap-2 flex-wrap">
            {
              project.projectOverview.techStack.map((item) => (
                <li class="dark:bg-level-2-dark bg-level-2 me-2 rounded-sm px-2.5 py-0.5 text-sm">{item.itemOne}</li>
              ))
            }
          </ul>
          <div class="">
            <MyPortableText content={project.projectOverview?.body} />
          </div>
        </div>
      </div>
    </section>
    <!-- <div class="max-w-2xl space-y-4">
      <h3 class="text-2xl">Tech</h3>
      <TwoItemsList listItems={project.projectOverview.techStack} />
    </div> -->
    <article class="flex flex-col-reverse lg:flex-row pt-10 gap-10 relative">
      <div class="max-w-[50em]">
        <MyPortableTextWithTOC content={project.body} />
      </div>
      <!-- <aside
        class="border-2 border-primary self-start min-w-80 lg:sticky top-16 p-5"
      >
        <nav>
          <h2 class="pb-2">Table of Contents</h2>
          <ul class="list-disc list-inside">
            {
              toc.map(({ text, id }) => (
                <li>
                  <a href={`#${id}`}>{text}</a>
                </li>
              ))
            }
          </ul>
        </nav>
      </aside> -->
    </article>
  </article>
  <section class="max-w-2xl mx-auto pt-20">
    <h2 class="text-4xl">All Projects</h2>
    <AllProjectsList listItems={allProjects} />
  </section>
</Layout>
