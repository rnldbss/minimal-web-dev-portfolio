---
import { PortableText } from "astro-portabletext";

// Custom types for fragment components
interface BlockProps {
  Component: (props: any) => JSX.Element;
  props: { node: any };
  children: any;
}

interface ListProps {
  Component: (props: any) => JSX.Element;
  props: { type: string };
  children: any;
}

interface MarkProps {
  Component: (props: any) => JSX.Element;
  props: Record<string, any>;
  children: any;
}

// Classes for headings
const headingClasses: Record<string, string> = {
  h1: "mb-4",
  h2: "mb-4",
  h3: "mb-4",
  h4: "mb-4",
};
---

<PortableText value={Astro.props.content}>
  <!-- Block elements -->
  <fragment slot="block">
    {
      ({ Component, props, children }: BlockProps) => {
        const { node } = props;

        if (["h1", "h2", "h3", "h4"].includes(node.style)) {
          const text =
            node.children?.map((child: any) => child.text).join("") || "";
          const id = text.toLowerCase().replace(/\s+/g, "-");
          const Tag = node.style as keyof JSX.IntrinsicElements;

          return (
            <Tag id={id} class={headingClasses[node.style]}>
              {children}
            </Tag>
          );
        }

        return (
          <Component {...props} class="mb-4">
            {children}
          </Component>
        );
      }
    }
  </fragment>

  <!-- Lists -->
  <fragment slot="list">
    {
      ({ Component, props, children }: ListProps) => {
        const listClass =
          props.type === "bullet"
            ? "list-decimal list-inside mb-4 ml-2 [&>li]:mb-2"
            : "list-disc list-inside mb-4 ml-2 [&>li]:mb-2";

        return (
          <Component {...props} class={listClass}>
            {children}
          </Component>
        );
      }
    }
  </fragment>

  <!-- Inline marks -->
  <fragment slot="mark">
    {
      ({ Component, props, children }: MarkProps) => (
        <Component {...props}>{children}</Component>
      )
    }
  </fragment>
</PortableText>
