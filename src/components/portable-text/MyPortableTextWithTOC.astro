---
import { PortableText } from "astro-portabletext";
import { urlFor } from "../../sanity/lib/image";

// Classes for headings
const headingClasses = {
  h1: "mb-4",
  h2: "mb-2 mt-14 first:mt-0 leading-snug",
  h3: "mb-2 mt-6 ",
  h4: "mb-2 mt-4",
};
---

<PortableText value={Astro.props.content}>
  <!-- Block elements -->
  <fragment slot="block">
    {
      ({ Component, props, children }) => {
        const { node } = props;

        //Check if is heading and add id from string
        if (["h1", "h2", "h3", "h4"].includes(node.style)) {
          const text = node.children?.map((child) => child.text).join("") || "";
          const id = text.toLowerCase().replace(/\s+/g, "-");
          const Tag = node.style;

          return (
            <Tag id={id} class={headingClasses[node.style]}>
              {children}
            </Tag>
          );
        }

        return (
          <Component {...props} class="mb-2">
            {children}
          </Component>
        );
      }
    }
  </fragment>

  <!-- Lists -->
  <fragment slot="list">
    {
      ({ Component, props, children }) => {
        const listClass =
          props.type === "bullet"
            ? "list-decimal mb-4 [&>li]:mb-2"
            : "list-disc mb-4 [&>li]:mb-2";

        return (
          <Component {...props} class={listClass}>
            {children}
          </Component>
        );
      }
    }
  </fragment>

  <!-- Inline marks -->
  <fragment slot="mark">
    {
      ({ Component, props, children }) => (
        <Component {...props}>{children}</Component>
      )
    }
  </fragment>
  <!-- Image -->
  <fragment slot="type">
    {
      ({ Component, props }) => {
        if (props.node._type === "image" && props.node.asset) {
          return (
            <div class="rounded-md overflow-hidden w-max mx-auto mt-8">
              <img
                src={urlFor(props.node).url()}
                alt={props.node.alt || "Image"}
                class="h-[400px]"
              />
            </div>
          );
        }

        return <Component {...props} />;
      }
    }
  </fragment>
</PortableText>
